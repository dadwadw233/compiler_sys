; ModuleID = 'sysyc'
source_filename = "./69_last_word_length.sy"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"

declare i64 @getint()

declare i64 @getch()

declare void @putint(i64)

declare void @putch(i64)

declare i64 @getarray(i64*)

declare i64 @putarray(i64, i64*)

define i64 @lengthOfLastWord(i64* %0, i64 %1) {
entry:
  %2 = icmp eq i64 %1, 0
  %3 = zext i1 %2 to i64
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %entry
  ret i64 0

6:                                                ; preds = %entry
  %7 = sub i64 %1, 1
  store i64 %7, i64* undef
  br label %8

8:                                                ; preds = %20, %6
  %9 = load i64, i64* undef
  %10 = icmp sgt i64 %9, -1
  %11 = zext i1 %10 to i64
  %12 = icmp ne i64 %11, 0
  %13 = load i64, i64* undef
  %14 = getelementptr i64, i64* %0, i64 %13
  %15 = load i64, i64* %14
  %16 = icmp eq i64 %15, 0
  %17 = zext i1 %16 to i64
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %12, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %8
  %21 = load i64, i64* undef
  %22 = sub i64 %21, 1
  store i64 %22, i64* undef
  br label %8

23:                                               ; preds = %8
  %24 = load i64, i64* undef
  %25 = icmp eq i64 %24, -1
  %26 = zext i1 %25 to i64
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  ret i64 0

29:                                               ; preds = %23
  %30 = load i64, i64* undef
  store i64 %30, i64* undef
  br label %31

31:                                               ; preds = %55, %29
  %32 = load i64, i64* undef
  %33 = icmp sgt i64 %32, -1
  %34 = zext i1 %33 to i64
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %31
  %37 = load i64, i64* undef
  %38 = getelementptr i64, i64* %0, i64 %37
  %39 = load i64, i64* %38
  %40 = icmp eq i64 %39, 0
  %41 = zext i1 %40 to i64
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %47, label %55

43:                                               ; preds = %31
  %44 = load i64, i64* undef
  %45 = load i64, i64* undef
  %46 = sub i64 %44, %45
  ret i64 %46

47:                                               ; preds = %36
  %48 = load i64, i64* undef
  %49 = sub i64 %1, %48
  %50 = sub i64 %49, 1
  %51 = sub i64 %1, 1
  %52 = load i64, i64* undef
  %53 = sub i64 %51, %52
  %54 = sub i64 %50, %53
  ret i64 %54

55:                                               ; preds = %36
  %56 = load i64, i64* undef
  %57 = sub i64 %56, 1
  store i64 %57, i64* undef
  br label %31
}

define i64 @main() {
entry:
  ret i64 <badref>
}
