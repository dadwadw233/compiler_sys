; ModuleID = 'sysyc'
source_filename = "./63_simple_atoi.sy"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"

declare i64 @getint()

declare i64 @getch()

declare void @putint(i64)

declare void @putch(i64)

declare i64 @getarray(i64*)

declare i64 @putarray(i64, i64*)

define i64 @atoi_(i64* %0) {
entry:
  store i64 0, i64* undef
  store i64 1, i64* undef
  store i64 0, i64* undef
  br label %1

1:                                                ; preds = %8, %entry
  %2 = load i64, i64* undef
  %3 = getelementptr i64, i64* %0, i64 %2
  %4 = load i64, i64* %3
  %5 = icmp eq i64 %4, 32
  %6 = zext i1 %5 to i64
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load i64, i64* undef
  %10 = add i64 %9, 1
  store i64 %10, i64* undef
  br label %1

11:                                               ; preds = %1
  %12 = load i64, i64* undef
  %13 = getelementptr i64, i64* %0, i64 %12
  %14 = load i64, i64* %13
  %15 = icmp eq i64 %14, 43
  %16 = zext i1 %15 to i64
  %17 = icmp ne i64 %16, 0
  %18 = load i64, i64* undef
  %19 = getelementptr i64, i64* %0, i64 %18
  %20 = load i64, i64* %19
  %21 = icmp eq i64 %20, 45
  %22 = zext i1 %21 to i64
  %23 = icmp ne i64 %22, 0
  %24 = or i1 %17, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %11
  %26 = load i64, i64* undef
  %27 = getelementptr i64, i64* %0, i64 %26
  %28 = load i64, i64* %27
  %29 = icmp eq i64 %28, 45
  %30 = zext i1 %29 to i64
  %31 = icmp ne i64 %30, 0
  br i1 %31, label %47, label %48

32:                                               ; preds = %11
  %33 = load i64, i64* undef
  %34 = getelementptr i64, i64* %0, i64 %33
  %35 = load i64, i64* %34
  %36 = icmp slt i64 %35, 48
  %37 = zext i1 %36 to i64
  %38 = icmp ne i64 %37, 0
  %39 = load i64, i64* undef
  %40 = getelementptr i64, i64* %0, i64 %39
  %41 = load i64, i64* %40
  %42 = icmp sgt i64 %41, 57
  %43 = zext i1 %42 to i64
  %44 = icmp ne i64 %43, 0
  %45 = or i1 %38, %44
  br i1 %45, label %51, label %53

46:                                               ; preds = %53, %48
  br label %54

47:                                               ; preds = %25
  store i64 -1, i64* undef
  br label %48

48:                                               ; preds = %47, %25
  %49 = load i64, i64* undef
  %50 = add i64 %49, 1
  store i64 %50, i64* undef
  br label %46

51:                                               ; preds = %32
  store i64 2147483647, i64* undef
  %52 = load i64, i64* undef
  ret i64 %52

53:                                               ; preds = %32
  br label %46

54:                                               ; preds = %75, %46
  %55 = load i64, i64* undef
  %56 = getelementptr i64, i64* %0, i64 %55
  %57 = load i64, i64* %56
  %58 = icmp ne i64 %57, 0
  %59 = zext i1 %58 to i64
  %60 = icmp ne i64 %59, 0
  %61 = load i64, i64* undef
  %62 = getelementptr i64, i64* %0, i64 %61
  %63 = load i64, i64* %62
  %64 = icmp sgt i64 %63, 47
  %65 = zext i1 %64 to i64
  %66 = icmp ne i64 %65, 0
  %67 = and i1 %60, %66
  %68 = load i64, i64* undef
  %69 = getelementptr i64, i64* %0, i64 %68
  %70 = load i64, i64* %69
  %71 = icmp slt i64 %70, 58
  %72 = zext i1 %71 to i64
  %73 = icmp ne i64 %72, 0
  %74 = and i1 %67, %73
  br i1 %74, label %75, label %85

75:                                               ; preds = %54
  %76 = load i64, i64* undef
  %77 = mul i64 %76, 10
  %78 = load i64, i64* undef
  %79 = getelementptr i64, i64* %0, i64 %78
  %80 = load i64, i64* %79
  %81 = add i64 %77, %80
  %82 = sub i64 %81, 48
  store i64 %82, i64* undef
  %83 = load i64, i64* undef
  %84 = add i64 %83, 1
  store i64 %84, i64* undef
  br label %54

85:                                               ; preds = %54
  %86 = load i64, i64* undef
  %87 = load i64, i64* undef
  %88 = mul i64 %86, %87
  ret i64 %88
}

define i64 @main() {
entry:
  br label %0

0:                                                ; preds = %4, %entry
  %.01 = phi i64 [ 0, %entry ], [ %5, %4 ]
  %.0 = phi i64 [ 0, %entry ], [ %6, %4 ]
  %1 = icmp ne i64 %.01, 10
  %2 = zext i1 %1 to i64
  %3 = icmp ne i64 %2, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %0
  %5 = call i64 @getch()
  %6 = add i64 %.0, 1
  br label %0

7:                                                ; preds = %0
  call void @putint(i64 <badref>)
  ret i64 0
}
