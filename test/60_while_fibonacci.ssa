; ModuleID = 'sysyc'
source_filename = "./60_while_fibonacci.sy"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"

@0 = global i64 zeroinitializer

declare i64 @getint()

declare i64 @getch()

declare void @putint(i64)

declare void @putch(i64)

declare i64 @getarray(i64*)

declare i64 @putarray(i64, i64*)

define i64 @fib(i64 %0) {
entry:
  store i64 %0, i64* undef
  store i64 0, i64* undef
  store i64 1, i64* undef
  %1 = load i64, i64* undef
  %2 = icmp eq i64 %1, 0
  %3 = zext i1 %2 to i64
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %entry
  ret i64 0

6:                                                ; preds = %entry
  %7 = load i64, i64* undef
  %8 = icmp eq i64 %7, 1
  %9 = zext i1 %8 to i64
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  ret i64 1

12:                                               ; preds = %6
  br label %13

13:                                               ; preds = %18, %12
  %14 = load i64, i64* undef
  %15 = icmp sgt i64 %14, 1
  %16 = zext i1 %15 to i64
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %13
  %19 = load i64, i64* undef
  %20 = load i64, i64* undef
  %21 = add i64 %19, %20
  %22 = load i64, i64* undef
  store i64 %22, i64* undef
  store i64 %21, i64* undef
  %23 = load i64, i64* undef
  %24 = sub i64 %23, 1
  store i64 %24, i64* undef
  br label %13

25:                                               ; preds = %13
  ret i64 %21
}

define i64 @main() {
entry:
  %0 = call i64 @getint()
  store i64 %0, i64* @0
  %1 = load i64, i64* @0
  %2 = call i64 @fib(i64 %1)
  ret i64 %2
}
