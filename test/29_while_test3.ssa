; ModuleID = 'sysyc'
source_filename = "./29_while_test3.sy"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n64-S128"

@0 = global i64 zeroinitializer
@1 = global i64 zeroinitializer
@2 = global i64 zeroinitializer
@3 = global i64 zeroinitializer

declare i64 @getint()

declare i64 @getch()

declare void @putint(i64)

declare void @putch(i64)

declare i64 @getarray(i64*)

declare i64 @putarray(i64, i64*)

define i64 @EightWhile() {
entry:
  store i64 5, i64* undef
  store i64 6, i64* undef
  store i64 7, i64* undef
  store i64 10, i64* undef
  br label %0

0:                                                ; preds = %32, %entry
  %1 = load i64, i64* undef
  %2 = icmp slt i64 %1, 20
  %3 = zext i1 %2 to i64
  %4 = icmp ne i64 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %0
  %6 = load i64, i64* undef
  %7 = add i64 %6, 3
  store i64 %7, i64* undef
  br label %24

8:                                                ; preds = %0
  %9 = load i64, i64* undef
  %10 = load i64, i64* undef
  %11 = load i64, i64* undef
  %12 = add i64 %10, %11
  %13 = add i64 %9, %12
  %14 = load i64, i64* undef
  %15 = add i64 %13, %14
  %16 = load i64, i64* @3
  %17 = load i64, i64* undef
  %18 = add i64 %16, %17
  %19 = load i64, i64* @0
  %20 = sub i64 %18, %19
  %21 = load i64, i64* @1
  %22 = add i64 %20, %21
  %23 = sub i64 %15, %22
  ret i64 %23

24:                                               ; preds = %43, %5
  %25 = load i64, i64* undef
  %26 = icmp slt i64 %25, 10
  %27 = zext i1 %26 to i64
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  %30 = load i64, i64* undef
  %31 = add i64 %30, 1
  store i64 %31, i64* undef
  br label %35

32:                                               ; preds = %24
  %33 = load i64, i64* undef
  %34 = sub i64 %33, 2
  store i64 %34, i64* undef
  br label %0

35:                                               ; preds = %54, %29
  %36 = load i64, i64* undef
  %37 = icmp eq i64 %36, 7
  %38 = zext i1 %37 to i64
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = load i64, i64* undef
  %42 = sub i64 %41, 1
  store i64 %42, i64* undef
  br label %46

43:                                               ; preds = %35
  %44 = load i64, i64* undef
  %45 = add i64 %44, 1
  store i64 %45, i64* undef
  br label %24

46:                                               ; preds = %65, %40
  %47 = load i64, i64* undef
  %48 = icmp slt i64 %47, 20
  %49 = zext i1 %48 to i64
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %46
  %52 = load i64, i64* undef
  %53 = add i64 %52, 3
  store i64 %53, i64* undef
  br label %57

54:                                               ; preds = %46
  %55 = load i64, i64* undef
  %56 = sub i64 %55, 1
  store i64 %56, i64* undef
  br label %35

57:                                               ; preds = %76, %51
  %58 = load i64, i64* @3
  %59 = icmp sgt i64 %58, 1
  %60 = zext i1 %59 to i64
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = load i64, i64* @3
  %64 = sub i64 %63, 1
  store i64 %64, i64* @3
  br label %68

65:                                               ; preds = %57
  %66 = load i64, i64* @3
  %67 = add i64 %66, 1
  store i64 %67, i64* @3
  br label %46

68:                                               ; preds = %87, %62
  %69 = load i64, i64* @2
  %70 = icmp sgt i64 %69, 2
  %71 = zext i1 %70 to i64
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = load i64, i64* @2
  %75 = sub i64 %74, 2
  store i64 %75, i64* @2
  br label %79

76:                                               ; preds = %68
  %77 = load i64, i64* @2
  %78 = add i64 %77, 1
  store i64 %78, i64* @2
  br label %57

79:                                               ; preds = %98, %73
  %80 = load i64, i64* @0
  %81 = icmp slt i64 %80, 3
  %82 = zext i1 %81 to i64
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = load i64, i64* @0
  %86 = add i64 %85, 10
  store i64 %86, i64* @0
  br label %90

87:                                               ; preds = %79
  %88 = load i64, i64* @0
  %89 = sub i64 %88, 8
  store i64 %89, i64* @0
  br label %68

90:                                               ; preds = %95, %84
  %91 = load i64, i64* @1
  %92 = icmp slt i64 %91, 10
  %93 = zext i1 %92 to i64
  %94 = icmp ne i64 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %90
  %96 = load i64, i64* @1
  %97 = add i64 %96, 8
  store i64 %97, i64* @1
  br label %90

98:                                               ; preds = %90
  %99 = load i64, i64* @1
  %100 = sub i64 %99, 1
  store i64 %100, i64* @1
  br label %79
}

define i64 @main() {
entry:
  store i64 1, i64* @0
  store i64 2, i64* @1
  store i64 4, i64* @3
  store i64 6, i64* @2
  %0 = call i64 @EightWhile()
  ret i64 %0
}
